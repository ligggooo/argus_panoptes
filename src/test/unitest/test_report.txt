对版本
    d43408b07a1c5541b72a940fcc73c4cc610f6f66
进行性能测试

测试一：
    uwsgi设置为单进程多线程模式
    使用redis获取全局唯一id
    postgresql部署在同一台物理机器
    物理机参数：
      双核 奔腾G2030 3.00GHz
      内存 4GB
    任务参数:
      并发数 130
      任务频率 13次/秒
      总任务数 50000

    任务完成数达到7000+时，出现明显的拥塞现象；
    监控行为额外耗开销时间从0.2秒逐渐增加到4.5秒

测试二：
    以上设置不变，并行任务数量下降到30。
    任务频率下降到 3次/秒
    监控行为额外耗开销时间稳定在0.16秒左右


多线程发起请求会造成后端请求堆积，不利于分析系统实际的请求处理能力，下面采用单线程发起请求的方式进行测试

以上系统的请求处理能力测试：
    对照:
        无监控装饰器
        并发数为1
        空任务
        总任务数 2000
        平均完成时间小于1e-6s

    测试一（concurrent_test_001）:
        带监控装饰器
        并发数为1
        空任务
        总任务数 2000
        完成时间从0.05逐渐增加到0.12，平均时间为0.09秒

    测试二（concurrent_test_002）:
        在测试一的基础上，将任务数加到2w
        总任务数 20000
        完成时间从0.05逐渐增加到0.5之后稳定住，平均时间为0.28秒

    结论：
        add_task_record 性能随记录数增加而恶化，单进程下请求处理能力在20/s到2/s之间

    猜测：
        记录数很少的时候，受限于postgresql数据库写入性能 + redist全局唯一id生成性能，处理能力约为20/s
        记录数很大的时候，使用树结构体对插入缓存的记录进行分析的代价越来越大，直到将处理能力拉低至2/s

    下一次测试将分析后台时间开销的构成。